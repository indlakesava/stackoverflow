Important Concepts:
1. Scalability
2. Performance
3. Latency and Throughput
4. Consistency
5. Availability
6. Partition Tolerance
7. CAP Theorem
8. Domain Name System
9. Content Delivery Network
10. Load Balancers and Reverse Proxy
11. Microservices
12. Databases
13. Caching
14. Message Queues

Standard Questions:
TinyURL
Movie-booking system : Book My Show/Fandango
Feed/Timeline -Twitter/Instagram
Posts, likes, follows, scale, API -Twitter/Instagram
Video Streaming Service - Youtube or Netflix
Messenger/ Chat room - Facebook or whatsapp
Ecommerce - Amazon/flipkart
Online book store
Quora/ Reddit
File management system - Dropbox/ Google Drive
Uber or lyft
API Rate Limiter(Github)
Pastebin
Parkinglot
Search Engine / Web Crawler
Recommendation System
Toll Payment system
Amazon fresh
Amazon Hub
Delivery - Zomato/Doordash/pizza shop
Weather Monitor
Real time game raking system
Logging/Notification system (store logs, metadata, alert, dashboard) - splunk
Google photos
Careers Page
Todo list
Alexa news feed based on history, susbscriptions, no duplications
push notification system
Shopping cart
Stock trading
Ads for users based on rules and metrics
Traffic light system
Plagarism checker
Image to product processing
Product catalog & search

Top 20 System Design Topics:
1. Requirements
  User needs and goals.
2. Scalability
  Horizontal scaling.
  Load balancing.
3. Availability
  High availability.
  Failover strategies.
4. Performance
  Caching.
  Optimization techniques.
5. Data Storage
  Relational databases.
  NoSQL solutions.
6. Architecture
  Monolithic vs. microservices.
7. Security
  Authentication.
  Encryption methods.
8. Design Patterns
  Singleton, Factory.
9. Networking
  Protocols.
  CDN.
10. Database Design
  Normalization.
  Indexing.
11. Messaging
  Queues.
Pub/Sub systems.
  12. API Design
RESTful APIs.
  Rate limiting.
13. Load Testing
  Tools.
  Metrics.
14. Caching Strategies
  LRU.
  Distributed caches.
15. State Management
  Sessions.
  Stateless architectures.
16. Infrastructure
  Cloud services.
  Containers.
17. Logging and Monitoring
  Tools.
  Alerting mechanisms.
18. Consistency Models
  ACID.
  BASE.
19. Backup and Recovery
  Strategies.
  Disaster recovery.

Flow:
Functional Requirements (Core functionalities)
Call out Assumptions (if any) - User Profile Creation and Authentication
Non Functional Requirements
Capacity Estimations - Estimated user base, QPS, r:w, Latency expected (r/w), Traffic (r/w), Storage, Memory
CAP Analysis - 
  Design Goals 
    Latency and Throughput requirements, Consistency vs Availability  
    [Weak/strong/eventual => consistency | Failover/replication => availability]
Services Needed - Note, Architecture Used, Connectivity
Database Shema Design and API Design R/W for Crucial services
Draw Services, Connectivity b/w services (APIs/MQs), Database step by step
Scalability - Load Balancing, and DB Replication
Performance Improvements - Caching, DNS, CDNs, Elastic Search, Sharding, and Indexing
Backup and Recovery strategies explain - SPOF, Replicas, Archiving
Maintanance - Logging, Monitoring, and Alerting


Resources:
https://leetcode.com/discuss/career/229177/My-System-Design-Template
https://www.designgurus.io/blog/system-design-interview-fundamentals
https://interviewing.io/guides/system-design-interview/part-two
https://www.geeksforgeeks.org/5-common-system-design-concepts-for-interview-preparation/
https://www.youtube.com/@SystemDesignInterview/videos
https://www.hellointerview.com/learn/system-design/in-a-hurry/introduction
https://www.freecodecamp.org/news/systems-design-for-interviews/
https://completedesigninterviewcourse.com/system-design-concepts-components/
https://www.interviewbit.com/system-design-interview-questions/
https://www.geeksforgeeks.org/system-design-tutorial/
https://www.youtube.com/@codeKarle/videos
https://www.youtube.com/watch?v=xpDnVSmNFX0&list=PLMCXHnjXnTnvo6alSjVkgxV-VH6EPyvoX&ab_channel=GauravSen
https://github.com/madd86/awesome-system-design?tab=readme-ov-file
https://www.youtube.com/@TechDummiesNarendraL/playlists
https://leetcode.com/discuss/study-guide/3616948/Golden-Rules-to-answer-in-a-System-Design-Interview

