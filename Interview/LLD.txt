https://newsletter.ashishps.com/p/basic-oop-concepts-explained-with-code
https://newsletter.ashishps.com/p/solid-principles-explained-with-code
https://github.com/ashishps1/awesome-low-level-design
https://medium.com/@amirm.lavasani/design-patterns-in-python-a-series-f502b7804ae5
https://github.com/kumaransg/LLD?tab=readme-ov-file
https://lldcoding.com/ - https://leetcode.com/discuss/interview-question/4513863/50%2B-LLD-Question-with-Solutions/
https://github.com/hkumar0132/lld/tree/master
https://leetcode.com/discuss/study-guide/1251516/my-approach-for-machine-coding-rounds-lld
https://leetcode.com/discuss/interview-question/3113238/Introduction-to-LLD-101
https://github.com/prasadgujar/low-level-design-primer/blob/master/solutions.md
https://github.com/tssovi/grokking-the-object-oriented-design-interview?tab=readme-ov-file
https://github.com/saif86/UML-CLASS-DIAGRAMS---EXAMPLES?tab=readme-ov-file
Google photos/Pinterest for UML diagrams

https://www.youtube.com/playlist?list=PLTCrU9sGybupCpY20eked6blbHI4zZ55k
https://www.youtube.com/playlist?list=PL6W8uoQQ2c61X_9e6Net0WdYZidm7zooW
https://www.youtube.com/playlist?list=PLAC2AM9O1C5KioUMeH9qIjbAV_RMmX8rd
https://www.youtube.com/playlist?list=PLJN9ydlFnJsiEgyjO3D3yBhtiENymhF8G
https://www.youtube.com/playlist?list=PL564gOx0bCLqTolRIHIsR2JPv11w8LESW

class diagram , use case diagram , sequence diagram and then the code.

Note: Before jumping to the next point always check with the interviewer if evrything looks good so far ot any additional things might be needed
Clarify requirements and core use cases while noting down the flow
Identify Entities - [ex: for stackoverflow - user, question, answer, comment, vote]
Create Classes - Attributes 
Identify methods
Design Relationships - UML Diagram
Implement necessary methods
Exception Handling / Edge cases

Use meaningful names
Focus on simplicity and readability
Favor composition over inheritance
Use Interfaces
Strive for Modularity
Apply Design patterns and Principles
Make your code scalable
